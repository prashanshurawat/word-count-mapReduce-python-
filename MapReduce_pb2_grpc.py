# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import MapReduce_pb2 as MapReduce__pb2


class mapStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.inputSplits = channel.unary_unary(
                '/master_map.map/inputSplits',
                request_serializer=MapReduce__pb2.input_split.SerializeToString,
                response_deserializer=MapReduce__pb2.input_response.FromString,
                )
        self.reducer_inputs = channel.unary_unary(
                '/master_map.map/reducer_inputs',
                request_serializer=MapReduce__pb2.input_split.SerializeToString,
                response_deserializer=MapReduce__pb2.input_response.FromString,
                )


class mapServicer(object):
    """Missing associated documentation comment in .proto file."""

    def inputSplits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reducer_inputs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_mapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'inputSplits': grpc.unary_unary_rpc_method_handler(
                    servicer.inputSplits,
                    request_deserializer=MapReduce__pb2.input_split.FromString,
                    response_serializer=MapReduce__pb2.input_response.SerializeToString,
            ),
            'reducer_inputs': grpc.unary_unary_rpc_method_handler(
                    servicer.reducer_inputs,
                    request_deserializer=MapReduce__pb2.input_split.FromString,
                    response_serializer=MapReduce__pb2.input_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'master_map.map', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class map(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def inputSplits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/master_map.map/inputSplits',
            MapReduce__pb2.input_split.SerializeToString,
            MapReduce__pb2.input_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reducer_inputs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/master_map.map/reducer_inputs',
            MapReduce__pb2.input_split.SerializeToString,
            MapReduce__pb2.input_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
